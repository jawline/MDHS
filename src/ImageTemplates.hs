module ImageTemplates where
import System.FilePath
import System.Directory
import Data.Char (toLower)
import Graphics.Image

-- Data type represents the possible transformations for a source image.
data ExpectedSize = Original
  | Fixed Int Int
  | Scaled Float
  | ScaledToWidth Float
  | ScaledToHeight Float
  | QualityThumb
  | QualityHigh
  deriving Show

-- An image 'expectation' includes the expected filename and dimensions or scaling factor
data ImageExpectation = ImageExpectation {
  name :: String,
  size :: ExpectedSize
}

-- Character substitutions to go from an expectation to its filename when being translated
substitutes :: Char -> Char
substitutes ' ' = '_'
substitutes '.' = '_'
substitutes x = toLower x

imageExpectationFilename :: ImageExpectation -> FilePath
imageExpectationFilename expectation = (name expectation) ++ "_" ++ (Prelude.map substitutes (show (size expectation)))

-- Round floating dimensions to integers
roundDims (a, b) = (round a, round b)

-- Scale a integer dimension pair by a scalar
scaleBy (a, b) scalar = roundDims (((fromIntegral a) * scalar), ((fromIntegral b) * scalar))

-- Convert integral dimension to floating dimensions
toFloating (a, b) = (fromIntegral a, fromIntegral b)

-- Given the current dimensions and the expected shape calculate the new dimensions
decideShape (a, b) Original = (a, b)
decideShape (a, b) (Fixed x y) = (x, y)
decideShape (a, b) (Scaled x) = roundDims (a' * x, b' * x)
  where (a', b') = toFloating (a, b)
decideShape (a, b) (ScaledToWidth x) = scaleBy (a, b) scalar
  where
    scalar = x / (fromIntegral a)
decideShape (a, b) (ScaledToHeight x) = scaleBy (a, b) scalar
  where
    scalar = x / (fromIntegral b)
decideShape dims QualityThumb = decideShape dims (ScaledToWidth 100)
decideShape dims QualityHigh = decideShape dims (ScaledToWidth 400)

-- Transforms a given file expectation (and source file) to a output image
transformExpectation :: FilePath -> FilePath -> ImageExpectation -> IO ()
transformExpectation imageRoot outputDir expectation = do
  let filename = outputDir </> (imageExpectationFilename expectation) <.> "png"
  putStrLn $ "[+] Transforming " ++ filename
  file <- readImageRGBA VU (imageRoot </> (name expectation) <.> "png")
  let newDims = decideShape (dims file) (size expectation)
  putStrLn $ show newDims
  writeImage filename $ resize Bilinear Edge newDims file
  return ()

-- Transforms a set of source files into web optimized files using expectations generated by finding the image template strings in markdown files, stopping unused files ending up in the build and automatically converting them to desired resolutions.
transformImages :: FilePath -> FilePath -> [ImageExpectation] -> IO ()
transformImages imageSource imageDest expectations = do
  mapM_ (\x -> transformExpectation imageSource imageDest x) expectations
  return ()
